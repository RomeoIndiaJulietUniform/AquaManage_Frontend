openapi: 3.0.0
info:
  title: AquaManage API
  version: 1.0.0
  description: API for managing aquariums
servers:
  - url: http://localhost:8081
    description: Local development server for the AquaManage API

paths:
  /users:
    get:
      summary: Get all users
      description: Retrieve a list of all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

    post:
      summary: User sign-up (Create a new user)
      description: Create a new user account by posting the user's data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                userName:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  userName:
                    type: string
                  email:
                    type: string
        '400':
          description: Bad request (e.g., missing or invalid fields)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /users/email/{email}:
    get:
      summary: Get user by email
      description: Retrieve user details by email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

    delete:
      summary: Delete user by email
      description: Remove a user from the system by their email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
            format: email
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /users/{id}:
    delete:
      summary: Delete user by ID
      description: Remove a user from the system by their ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        userName:
          type: string
        email:
          type: string
          format: email
